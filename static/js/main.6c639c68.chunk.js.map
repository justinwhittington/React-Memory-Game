{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Title/Title.js","components/ScoreCard/ScoreCard.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","handleClick","name","alt","src","image","Wrapper","children","Title","ScoreCard","score","hiscore","clicked","App","state","images","componentDidMount","_this","shuffle","n","indexOf","push","console","log","setState","counter","length","index","Math","floor","random","temp","_this2","this","components_Wrapper_Wrapper","components_Title_Title","components_ScoreCard_ScoreCard","id","value","map","friend","components_Card_Card","removeFriend","key","occupation","location","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"u6FAceA,SAXF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OACEE,QAAS,kBAAML,EAAMM,YAAYN,EAAMO,OACvCH,UAAU,iBAEVH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMO,KAAME,IAAKT,EAAMU,YCJxBC,SAFC,SAAAX,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMY,YCS1CC,SARD,SAAAb,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,uBACAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,uCCHWW,SAFG,SAAAd,GAAK,OAAIC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,UAAiCJ,EAAMe,MAAvC,iBAA4Df,EAAMgB,kBCIzFC,SAAU,IAmFCC,6MA/EbC,MAAQ,CACNJ,MAAO,EACPC,QAAS,EACTI,OAAQA,KAGVC,kBAAoB,WAClBC,EAAKC,aAGPjB,YAAc,SAAAC,GACZ,IAAIiB,EAAIP,EAAQQ,QAAQlB,IAEb,IAAPiB,GAAYF,EAAKH,MAAMJ,MAAQ,EAAIO,EAAKH,MAAMH,SAChDC,EAAQS,KAAKnB,GACboB,QAAQC,IAAIN,EAAKH,MAAMJ,OACvBO,EAAKO,SAAS,CAAEd,MAAOO,EAAKH,MAAMJ,MAAQ,IAC1CO,EAAKO,SAAS,CAACb,QAASM,EAAKH,MAAMJ,MAAQ,IAC3CY,QAAQC,IAAIN,EAAKH,MAAMJ,OACvBO,EAAKC,YACW,IAAPC,GACTP,EAAQS,KAAKnB,GACboB,QAAQC,IAAIN,EAAKH,MAAMJ,OACvBO,EAAKO,SAAS,CAAEd,MAAOO,EAAKH,MAAMJ,MAAQ,IAC1CY,QAAQC,IAAIN,EAAKH,MAAMJ,OAEvBO,EAAKC,YAELD,EAAKO,SAAS,CAAEd,MAAO,IACvBE,EAAU,GACVK,EAAKC,cAMTA,QAAU,WAER,IADA,IAAIO,EAAUV,EAAOW,OACdD,EAAU,GAAG,CAClB,IAAIE,EAAQC,KAAKC,MAAMD,KAAKE,SAAWL,GAGnCM,EAAOhB,IADXU,GAEAV,EAAOU,GAAWV,EAAOY,GACzBZ,EAAOY,GAASI,EAGlBT,QAAQC,IAAIN,EAAKH,MAAMJ,gFAGhB,IAAAsB,EAAAC,KAGP,OAFIA,KAAKnB,MAAMJ,MAGbd,EAAAC,EAAAC,cAACoC,EAAD,KACEtC,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAACsC,EAAD,CACEC,GAAIJ,KAAKnB,MAAMJ,MACf4B,MAAOL,KAAKnB,MAAMJ,MAClBA,MAAOuB,KAAKnB,MAAMJ,MAClBC,QAASsB,KAAKnB,MAAMH,UAErBsB,KAAKnB,MAAMC,OAAOwB,IAAI,SAAAC,GAAM,OAC3B5C,EAAAC,EAAAC,cAAC2C,EAAD,CACEC,aAAcV,EAAKU,aACnBL,GAAIG,EAAOH,GACXM,IAAKH,EAAOH,GACZnC,KAAMsC,EAAOtC,KACbG,MAAOmC,EAAOnC,MACduC,WAAYJ,EAAOI,WACnBC,SAAUL,EAAOK,SACjB5C,YAAa+B,EAAK/B,wBAxEZ6C,aCEEC,QACW,cAA7BC,OAAOH,SAASI,UAEe,UAA7BD,OAAOH,SAASI,UAEhBD,OAAOH,SAASI,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6c639c68.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => (\r\n  <div className=\"card\">\r\n    <div\r\n      onClick={() => props.handleClick(props.name)}\r\n      className=\"img-container\"\r\n    >\r\n      <img alt={props.name} src={props.image} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Card;\r\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./Title.css\";\n\n\nconst Title = props => (\n  <div className='head'>\n    <h1 className='top'>Test Your Memory!!!</h1>\n    <br />\n    <p>Click an image to begin</p>\n  </div>\n);\n\nexport default Title;\n","import React from \"react\";\r\nimport \"./ScoreCard.css\";\r\n\r\nconst ScoreCard = props => <p className=\"ScoreCard\">Score: {props.score} || Hi-Score: {props.hiscore}</p>;\r\n\r\nexport default ScoreCard;\r\n","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport ScoreCard from \"./components/ScoreCard\";\nimport images from \"./images.json\";\nimport \"./App.css\";\nlet clicked = [];\n\n\nclass App extends Component {\n  state = {\n    score: 0,\n    hiscore: 0,\n    images: images\n  };\n\n  componentDidMount = () => {\n    this.shuffle();\n  };\n\n  handleClick = name => {\n    let n = clicked.indexOf(name);\n\n    if (n === -1 && this.state.score + 1 > this.state.hiscore) {\n      clicked.push(name);\n      console.log(this.state.score);\n      this.setState({ score: this.state.score + 1 });\n      this.setState({hiscore: this.state.score + 1});\n      console.log(this.state.score);\n      this.shuffle();\n    } else if (n === -1) {\n      clicked.push(name);\n      console.log(this.state.score);\n      this.setState({ score: this.state.score + 1 });\n      console.log(this.state.score);\n\n      this.shuffle();\n    } else {\n      this.setState({ score: 0 });\n      clicked = [];\n      this.shuffle();\n    }\n  };\n\n \n\n  shuffle = () => {\n    let counter = images.length;\n    while (counter > 0) {\n      let index = Math.floor(Math.random() * counter);\n\n      counter--;\n      let temp = images[counter];\n      images[counter] = images[index];\n      images[index] = temp;\n    }\n\n    console.log(this.state.score);\n  };\n\n  render() {\n    if (this.state.score === 0) {\n    }\n    return (\n      <Wrapper>\n        <Title ></Title>\n        <ScoreCard\n          id={this.state.score}\n          value={this.state.score}\n          score={this.state.score}\n          hiscore={this.state.hiscore}\n        />\n        {this.state.images.map(friend => (\n          <Card\n            removeFriend={this.removeFriend}\n            id={friend.id}\n            key={friend.id}\n            name={friend.name}\n            image={friend.image}\n            occupation={friend.occupation}\n            location={friend.location}\n            handleClick={this.handleClick}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}